<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, $location, $http) {
  /* widget controller */
  var c = this;
	
	c.sys_id = $location.search().sys_id;
	
	c.uploadExcel = function() {
		if (!c.file) return;
    
    c.uploading = true;
    c.error = null;
    
		var g_form = $scope.page.g_form;
		
		// call the API to upload file
    $http.post('/api/now/attachment/file', c.file[0], {
			headers: {'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'},
			params: {table_name: 'sc_cart_item', 
							 table_sys_id: c.sys_id,
							 file_name: c.file[0].name
							}
			}).then(function(res) {
			  // call server side script to pare excel file content
				c.server.get({action: 'parse_excel', attachment_id: res.data.result.sys_id})
					.then(function(r) {
						if(r.data.mrvsData && r.data.mrvsData.length > 0) {
							// set variable sets to the page form
							g_form.setValue('test_script_set', JSON.stringify(r.data.mrvsData));
						}
				})
			});
	}
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>upload_excel</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Upload excel</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	data.mrvsData = [];
	
	if (input && input.action === 'parse_excel') {
		var parser = new sn_impex.GlideExcelParser();
		var attachment = new GlideSysAttachment();
    // use attachment sys id of an excel file
    var attachmentStream = attachment.getContentStream(input.attachment_id);
		parser.parse(attachmentStream); 
																											 
		// retrieve the column headers
		// columns must be: test_name, test_notes
		var headers = parser.getColumnHeaders();
		
		// put the data to data.mrvsData
		while(parser.next()) { 
			var row = parser.getRow(); 
			data.mrvsData.push(row);
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-15 13:48:01</sys_created_on>
        <sys_id>df4e7417830ee250fa7e7230feaad394</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_name>Upload excel</sys_name>
        <sys_package display_value="Test scripting" source="x_1755686_test_scr">258c414583b96610fa7e7230feaad3c7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Test scripting">258c414583b96610fa7e7230feaad3c7</sys_scope>
        <sys_update_name>sp_widget_df4e7417830ee250fa7e7230feaad394</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-16 07:39:36</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  <label class="btn btn-primary">
    Upload Excel
    <input type="file" accept=".xlsx,.xls" 
           style="display: none;" 
           ng-model="c.file" 
           ng-file-select="c.uploadExcel()" />
  </label>
</div>]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>df4e7417830ee250fa7e7230feaad394</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-15 13:48:01</sys_created_on>
        <sys_id>d34e70df830ee250fa7e7230feaad30e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-15 13:48:01</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
